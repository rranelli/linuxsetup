#!/usr/bin/env bash
__is_interactive() { [[ $- == *i* ]]; }

setup_ps1() {
    # Colors
    local txtblk='\[\e[0;30m\]' # Black - Regular
    local txtred='\[\e[0;31m\]' # Red
    local txtgrn='\[\e[0;32m\]' # Green
    local txtylw='\[\e[0;33m\]' # Yellow
    local txtblu='\[\e[0;34m\]' # Blue
    local txtpur='\[\e[0;35m\]' # Purple
    local txtcyn='\[\e[0;36m\]' # Cyan
    local txtwht='\[\e[0;37m\]' # White
    local bldblk='\[\e[1;30m\]' # Black - Bold
    local bldred='\[\e[1;31m\]' # Red
    local bldgrn='\[\e[1;32m\]' # Green
    local bldylw='\[\e[1;33m\]' # Yellow
    local bldblu='\[\e[1;34m\]' # Blue
    local bldpur='\[\e[1;35m\]' # Purple
    local bldcyn='\[\e[1;36m\]' # Cyan
    local bldwht='\[\e[1;37m\]' # White
    local undblk='\[\e[4;30m\]' # Black - Underline
    local undred='\[\e[4;31m\]' # Red
    local undgrn='\[\e[4;32m\]' # Green
    local undylw='\[\e[4;33m\]' # Yellow
    local undblu='\[\e[4;34m\]' # Blue
    local undpur='\[\e[4;35m\]' # Purple
    local undcyn='\[\e[4;36m\]' # Cyan
    local undwht='\[\e[4;37m\]' # White
    local bakblk='\[\e[40m\]' # Black - Background
    local bakred='\[\e[41m\]' # Red
    local bakgrn='\[\e[42m\]' # Green
    local bakylw='\[\e[43m\]' # Yellow
    local bakblu='\[\e[44m\]' # Blue
    local bakpur='\[\e[45m\]' # Purple
    local bakcyn='\[\e[46m\]' # Cyan
    local bakwht='\[\e[47m\]' # White
    local hiblk='\[\e[0;90m\]' # Black - High intensity
    local hired='\[\e[0;91m\]' # Red
    local higrn='\[\e[0;92m\]' # Green
    local hiylw='\[\e[0;93m\]' # Yellow
    local hiblu='\[\e[0;94m\]' # Blue
    local hipur='\[\e[0;95m\]' # Purple
    local hicyn='\[\e[0;96m\]' # Cyan
    local hiwht='\[\e[0;97m\]' # White
    local clroff='\[\e[0m\]' # Text Reset

    # other variables with human readable names
    # \a an ASCII bell character (07)
    # \d the date in "Weekday Month Date" format (e.g., "Tue May 26")
    # \D{format} the format is passed to strftime(3) and the result
    # is inserted into the prompt string an empty format
    # results in a locale-specific time representation.
    # The braces are required
    # \e an ASCII escape character (033)
    # \h the hostname up to the first `.'
    # \H the hostname
    # \j the number of jobs currently managed by the shell
    # \l the basename of the shell's terminal device name
    # \n newline
    # \r carriage return
    # \s the name of the shell, the basename of $0 (the portion following
    # the final slash)
    # \t the current time in 24-hour HH:MM:SS format
    # \T the current time in 12-hour HH:MM:SS format
    # \@ the current time in 12-hour am/pm format
    # \A the current time in 24-hour HH:MM format
    # \u the username of the current user
    # \v the version of bash (e.g., 2.00)
    # \V the release of bash, version + patch level (e.g., 2.00.0)
    # \w the current working directory, with $HOME abbreviated with a tilde
    # \W the basename of the current working directory, with $HOME
    # abbreviated with a tilde
    # \! the history number of this command
    # \# the command number of this command
    # \$ if the effective UID is 0, a #, otherwise a $
    # \nnn the character corresponding to the octal number nnn
    # \\ a backslash
    # \[ begin a sequence of non-printing characters, which could be used
    # to embed a terminal control sequence into the prompt
    # \] end a sequence of non-printing characters

    local time24h="\A"
    local path="\w"
    local newline="\n"
    local user="\u"
    local host="\h"

    function parse_login_shell {
        ret=$?; shopt -q login_shell && echo 'Œæ[login]'
        return $ret
    }
    function success_prompt {
      ret=$?; [ $ret = 0 ] && echo "ùõå.x"
      return $ret
    }
    function failure_prompt {
      ret=$?; [ $ret != 0 ] && echo "‚úò.${ret}"
      return $ret
    }

    function clr { echo -e "${1}${2}\[\e[0m\]"; }

    local time="$(clr $higrn üï•)$(clr $higrn $time24h)"
    local user_at_host="$(clr $hicyn üï¥) $(clr $hicyn $user)$(clr $hiwht üñß) $(clr $hiwht $host)"
    local path="$(clr $hipur üñø) $(clr $hipur $path)"
    local success='$(success_prompt)'
    local failure='$(failure_prompt)'
    local arrow='‚ü∂  '
    local login_shell_indicator="$(clr $hired '$(parse_login_shell)')"

    PS1=""
    PS1+="$user_at_host"
    PS1+="$time"
    PS1+="$path"
    PS1+="$newline"
    PS1+="$login_shell_indicator"
    PS1+="$(clr $hicyn $success)"
    PS1+="$(clr $bldred $failure)"
    PS1+="$arrow"

    if [[ "$TERM" == "vt100" || "$TERM" == "dumb"  || "$TERM" == "eterm-color" ]]; then
	# This had to be added in order for emacs' TRAMP to work seamlessly
    	PS1="$failure[\A](\w)\n$ "
        PAGER=less # terrible hack
    fi
}

__is_interactive && setup_ps1
