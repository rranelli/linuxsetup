#!/bin/bash
gitmulticast-telnyx() {
  GITHUB_USER_TYPE=orgs GITHUB_USER=team-telnyx CODE_DIR="$HOME/telnyx" gitmulticast "$@"
}
alias 8gmt='gitmulticast-telnyx'

grn-echo() { echo -e "\e[0;32m${@}\e[0m"; }
red-echo() { echo -e "\e[0;31m${@}\e[0m"; }

__make_me_sudo() { sudo echo -n ;}

8vpn-connect() {
  __make_me_sudo

  (
    mimipass get telnyx.okta.com/password \
      | silently sudo vpnc
  ) && grn-echo "Connected!" || red-echo "Error!"
}

8get-vpn-pid() { pgrep vpnc ;}

8vpn-ps1() {
  local ret=$?
  local pid=$(8get-vpn-pid)
  [ -n "${pid}" ] && echo "(vpn)"

  return $ret
}

8vpn-disconnect() {
  __make_me_sudo

  local pid=$(8get-vpn-pid)
  if [ -n "${pid}" ]; then
    sudo kill "${pid}"
    sleep 0.2
    grn-echo "Disconnected from ${pid}"
  else
    grn-echo "Not connected"
  fi
}

8dialplan-json-to-query() {
  local path=$1
  (cd dialplan &&
     elixir -pa _build/dev/lib/poison/ebin -e '
content = IO.read(:stdio, :all)
|> Poison.decode!
|> Enum.map(fn {key, value} -> "#{key}=#{URI.encode_www_form(value)}" end)
|> Enum.join("&")

File.write!("'"${path}"'.temp", content)
' < "${path}" && mv "${path}"{.temp,}
  )
}

8tv-meld-latest() {
  local REPO_ROOT=$(git rev-parse --show-toplevel)
  local LATEST_OUTPUT=$(ls -1 output/ | tail -n1)
  meld "${REPO_ROOT}/output/${LATEST_OUTPUT}"/dialplan-{master,red}

  echo ${LATEST_OUTPUT}
}

8tv-clean-snapshots() {
  local REPO_ROOT=$(git rev-parse --show-toplevel)
  ls -1 snapshots/ \
    | sort -r \
    | tail -n +2 \
    | xargs -n1 -I{} rm -rf snapshots/{}
}

8tv-update-snapshot() {
  local REPO_ROOT=$(git rev-parse --show-toplevel)
  local LATEST_SNAPSHOT=$(ls -1 snapshots/ | tail -n1)
  sed -i -e "s/SNAPSHOT=\\/snapshots\\/.*$/SNAPSHOT=\\/snapshots\\/${LATEST_SNAPSHOT}/g" mockserver.env
}

8tv-clean() {
  (
    cd $(git rev-parse --show-toplevel) && \
      8retry bin/snapshotter prod && 8tv-clean-snapshots && 8tv-update-snapshot && docker-compose pull --ignore-pull-failures
  )
}

8tv-clean-verify() {
  (
    cd $(git rev-parse --show-toplevel) && \
      8tv-clean && \
      bin/up.sh dialplan && \
      sleep 220 && \
      8tv-verify
  )
}

8tv-verify() {
  (
    cd $(git rev-parse --show-toplevel) && \
      for q in queries/*; do
        bin/verifier -n8 dialplan --process all "$q" && 8tv-meld-latest
      done
  )
}

8fscli() {
  local TANKER=${1:-ld6-tanker02}
  local ENV=${2:-dev}
  local LOGFILE=${3:-b2bualog-$TANKER.log}

  local container_ip="$(ssh -t ${TANKER} sudo docker inspect b2bua-${ENV} 2>/dev/null | jq .[].NetworkSettings.Networks[].IPAddress)"
  ssh -t ${TANKER} sudo docker exec -ti "b2bua-${ENV}" fs_cli -H "${container_ip}" -p "$(mimipass get telnyx/fscli)" |& tee "${LOGFILE}"
}

8check-container-version() {
  for tanker in ${TANKERS[@]}; do
    for container in "$@"; do
      ssh "$tanker" "sudo docker inspect ${container}" 2>/dev/null | jq "\"${container}@${tanker} - commit:\(.[].Config.Labels.GIT_COMMIT) created:\(.[].Created)\""
    done
  done
}

declare -a TANKERS=(ams3-tanker01 ch1-tanker01 ch1-tanker02 dal9-tanker01 dal9-tanker02 ld6-tanker01 ld6-tanker02 sjc3-tanker01 sjc3-tanker02 tor1-tanker01 van2-tanker01 van2-tanker02 wdc4-tanker01 wdc4-tanker02)

PS1="\$(8vpn-ps1)$PS1"
